import os
import sys
from data_generators.generator import *
from paramsMainGenerators import *


def usage():
    print("Usage:")
    print('python3 mainGenerators.py "generator" "numInstances"')
    print("The generator can be:")
    print("0 -> Random")
    print("1 -> Feasible 1")
    print("2 -> Feasible 2")


if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Not enough parameters")
        usage()
        exit(1)

    if len(sys.argv) > 3:
        print("Too much parameters")
        usage()
        exit(1)

    generator = sys.argv[1]
    if generator not in ['0', '1', '2']:
        print("Invalid parameter for generator", generator)
        exit(1)

    numInstances = sys.argv[2]
    try:
        numInstances = int(numInstances)
    except ValueError:
        print("Invalid value for numInstances", numInstances)
        exit(1)

    folder = "data_generators/autoGeneratedData/"
    if not os.path.exists(folder):
        os.makedirs(folder)

    for i in range(numInstances):
        # using random generator
        if generator == '0':
            name = "random_" + str(i+1) + ".dat"
            params = generateRandom(distrDemand, distrMinHours, distrMaxHours,
                                              distrMaxConsec, distrMaxPresence, hoursDay)
            writeParams(params, "RANDOM", folder + name, -1)

        # using generateFeasible1
        elif generator == '1':
            name = "feasible1_" + str(i+1) + ".dat"
            (params, nurses) = generateFeasible1(distrDemand, distrMaxHours, distrMaxConsec, distrMaxPresence, hoursDay)

        # using generateFeasible2
        elif generator == '2':
            name = "feasible2_" + str(i+1) + ".dat"
            (params, nurses) = generateFeasible2(distrNNurses, hoursDay)

        if generator in ['1', '2']:
            # stops the program if a generated instance is not OK
            assert isFeasibleGeneratorOk(nurses, params)
            cost = sum(sum(nurse) > 0 for nurse in nurses)
            writeParams(params, "FEASIBLE", folder + name, cost)